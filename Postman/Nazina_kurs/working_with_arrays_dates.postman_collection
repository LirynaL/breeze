{
	"info": {
		"_postman_id": "613c7183-27da-40eb-bf31-57835fb31f4d",
		"name": "lesson_8",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "DZ_37",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							" var mar = \"море, море, океан, море, море, яхта\";\r",
							" var find = \"море\"; // объявляем переменную для слова-поиска\r",
							" var index_more = []; //создаём массив для записи в него индексов\r",
							" var i = 0; //индекс\r",
							" var n = true;\r",
							" while ( n ) { \r",
							"    x = mar.indexOf(find, i); //ищем индекс начала слова\r",
							"    if ( x > -1 )  {  //мы знаем, что если indexOf ничего не находит, то вернется -1, делаем условие, что пока х>-1, т.е. находится поисковое слово, то выполняем следующий код:\r",
							"              index_more.push(x); //записываем в массив индексы, с которых начинаются найденные слова\r",
							"              i = x + find.length; // и индекс, с которого начинается следующий поиск определяется путем прибавления длины поискового слова к предыдущему найденному индексу\r",
							" \r",
							"               } \r",
							"    else \r",
							"            {n = false}\r",
							"\r",
							" }\r",
							"console.log(index_more);\r",
							" \r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/get",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"get"
					]
				}
			},
			"response": []
		},
		{
			"name": "DZ_38_sugg",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"y = jsonData.suggestions.length; // для начала определяем длину массива с подсказками\r",
							"console.log (\"Длина массива с подсказками: \" + y)\r",
							"\r",
							"// делаем циклы for с условием, пока номер текущего  элемента массива suggestions меньше длины массива с подсказками, то если поле не null записываем его значение во вновьсозданный массив \r",
							"// 1. Массив с фамилиями с помощью метода x[x.length]\r",
							"var surname_arr = [];\r",
							"for (i = 0; i < y; i++) {\r",
							"   if (jsonData.suggestions[i].data.surname != null) {\r",
							"   surname_arr[surname_arr.length] = jsonData.suggestions[i].data.surname;\r",
							"   }\r",
							"}\r",
							"console.log (\"Фамилии с помощью метода x[x.length]: \");\r",
							"console.log (surname_arr);\r",
							"// 2. Массив с именами методом push\r",
							"var name_arr = [];\r",
							"for (i = 0; i < y; i++) {\r",
							"   if (jsonData.suggestions[i].data.name != null) {\r",
							"   name_arr.push(jsonData.suggestions[i].data.name)\r",
							"   }\r",
							"}\r",
							"console.log (\"Имена push: \");\r",
							"console.log (name_arr)\r",
							"//3. Массив с именами методом unshift\r",
							"var name_arr2 = [];\r",
							"for (i = 0; i < y; i++) {\r",
							"   if (jsonData.suggestions[i].data.name != null) {\r",
							"   name_arr2.unshift(jsonData.suggestions[i].data.name)\r",
							"   }\r",
							"}\r",
							"console.log (\"Имена методом unshift: \");\r",
							"console.log (name_arr2)\r",
							"//4. Массив с именами методом splice. Т.к. массив с именами самый наглядный, в отличае от массива с отчествами, то три метода применено у нему\r",
							"var name_arr3 = [];\r",
							"for (i = 0; i < y; i++) {\r",
							"   if (jsonData.suggestions[i].data.name != null) {\r",
							"   name_arr3.splice(i,0, jsonData.suggestions[i].data.name)\r",
							"   }\r",
							"}\r",
							"console.log (\"Имена методом splice: \");\r",
							"console.log (name_arr3)\r",
							"// 5. Массив с отчествами методом push\r",
							"var patronymic_arr = [];\r",
							"for (i = 0; i < y; i++) {\r",
							"   if (jsonData.suggestions[i].data.patronymic != null) {\r",
							"   patronymic_arr.push(jsonData.suggestions[i].data.patronymic)\r",
							"   }\r",
							"}\r",
							"console.log (\"Отчества методом push: \");\r",
							"console.log (patronymic_arr);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Token 793d2830a6360a1569c8e7b9dd1afeb2f57ffa77"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"query\": \"Ан\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/fio",
					"protocol": "https",
					"host": [
						"suggestions",
						"dadata",
						"ru"
					],
					"path": [
						"suggestions",
						"api",
						"4_1",
						"rs",
						"suggest",
						"fio"
					]
				}
			},
			"response": []
		},
		{
			"name": "DZ_39_date_jira",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"date_created = new Date(jsonData.fields.created);",
							"console.log(\"Дата created: \" + date_created);",
							"",
							"pm.test(\"Проверка на дату\", function () {",
							"    pm.expect(date_created.getDate()).to.eql(25);",
							"});",
							"pm.test(\"CRASH Проверка на дату\", function () {",
							"    pm.expect(date_created.getDate()).to.eql(24);",
							"});",
							"",
							"pm.test(\"Проверка на месяц\", function () {",
							"    pm.expect(date_created.getMonth()).to.eql(11);",
							"});",
							"pm.test(\"CRASH Проверка на месяц\", function () {",
							"    pm.expect(date_created.getMonth()).to.eql(12);",
							"});",
							"",
							"pm.test(\"Проверка на год\", function () {",
							"    pm.expect(date_created.getFullYear()).to.eql(2019);",
							"});",
							"",
							"pm.test(\"CRASH Проверка на год\", function () {",
							"    pm.expect(date_created.getFullYear()).to.eql(2018);",
							"});",
							"",
							"",
							"n_d = new Date (2019, 11, 25);",
							"",
							"date_1 = n_d.toDateString();",
							"date_2 = date_created.toDateString();",
							"",
							"pm.test(\"Через toDateString \", function () {",
							"    pm.expect(date_1).to.eql(date_2);",
							"});",
							"// для CRASH можно поменять дату с чем стравниваем, н-р",
							" n_d = new Date (2019, 11, 24);",
							"date_1 = n_d.toDateString();",
							"date_2 = date_created.toDateString();",
							"",
							"pm.test(\"CRASH Через toDateString \", function () {",
							"    pm.expect(date_1).to.eql(date_2);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "23D32QzT2shOzr2zG8Ur117C",
							"type": "string"
						},
						{
							"key": "username",
							"value": "mail.for.testbase@yandex.ru",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://testbase.atlassian.net/rest/api/3/issue/TV-4",
					"protocol": "https",
					"host": [
						"testbase",
						"atlassian",
						"net"
					],
					"path": [
						"rest",
						"api",
						"3",
						"issue",
						"TV-4"
					]
				}
			},
			"response": []
		},
		{
			"name": "DZ_40_cronos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Удачно добавлен, проверка на success\", function () {\r",
							"    pm.expect(jsonData.type).to.eql('success'); \r",
							"});\r",
							"pm.test(\"CRASH Удачно добавлен, проверка на success\", function () {\r",
							"    pm.expect(jsonData.type).to.eql('succe'); \r",
							"});\r",
							"// разбиваем строку на элементы\r",
							"var arr_message = jsonData.message.split(' ');\r",
							"console.log(arr_message);\r",
							"//берем элемент с датой, разбиваем его на элементы, меняем порядок в массиве для того, чтоб корректно установить дату методом new Date()\r",
							"x = arr_message[9].split(\".\").reverse();\r",
							"x.splice(3, 0, arr_message[10]) //добавляем к дате элемент с данными о времени\r",
							"console.log(x);\r",
							"//создаем дату\r",
							"date_for_test = new Date(x);\r",
							"console.log(date_for_test);\r",
							"//проводим тесты на дату, месяц, год (просто указала 2020й)\r",
							"const assert = require('assert');\r",
							"\r",
							"pm.test(\"Тест на дату\", function () {\r",
							"    assert.ok(date_for_test.getDate() == pm.environment.get('days')); \r",
							"});\r",
							"pm.test(\"CRASH Тест на дату\", function () {\r",
							"    assert.ok(date_for_test.getDate() == (pm.environment.get('days')-3)); \r",
							"});\r",
							"pm.test(\"Тест на месяц\", function () {\r",
							"    assert.ok(date_for_test.getMonth() == (pm.environment.get('month') - 1)); \r",
							"});\r",
							"pm.test(\"CRASH Тест на месяц\", function () {\r",
							"    assert.ok(date_for_test.getMonth() == (pm.environment.get('month') - 2)); \r",
							"});\r",
							"\r",
							"pm.test(\"Тест на год\", function () {\r",
							"    pm.expect(date_for_test.getFullYear()).to.eql(2020); \r",
							"});\r",
							"pm.test(\"CRASH Тест на год\", function () {\r",
							"    pm.expect(date_for_test.getFullYear()).to.eql(2021); \r",
							"});\r",
							"pm.test(\"Тест на часы\", function () {\r",
							"    assert.ok(date_for_test.getHours() == pm.environment.get('hours')); \r",
							"});\r",
							"pm.test(\"CRASH Тест на часы\", function () {\r",
							"    assert.ok(date_for_test.getHours() == (pm.environment.get('hours') -1)); \r",
							"});\r",
							"\r",
							"pm.test(\"Тест на минуты\", function () {\r",
							"    assert.ok(date_for_test.getMinutes() == pm.environment.get('minutes')); \r",
							"});\r",
							"pm.test(\"Тест на минуты\", function () {\r",
							"    assert.ok(date_for_test.getMinutes() == (pm.environment.get('minutes') - 1)); \r",
							"});\r",
							"pm.test(\"Тест на номер задачи\", function () {\r",
							"    assert.ok(arr_message[5] == pm.environment.get('task_id')); \r",
							"});\r",
							"pm.test(\"Тест на номер задачи\", function () {\r",
							"    assert.ok(arr_message[5] == (pm.environment.get('task_id') - 1)); \r",
							"});\r",
							"// проверяем текст сообщения \r",
							"if (pm.environment.get('days') < 10) { \r",
							"    pm.test(\"Тест на MESSAGE\", function () {\r",
							"    pm.expect(jsonData.message).to.eql(\"Расписание успешно добавлено в задачу \" + pm.environment.get('task_id') + \" Следущая дата запуска 0\" + pm.environment.get('days') + \".\" + pm.environment.get('month') + \".2020 \" + pm.environment.get('hours') + \":\" + pm.environment.get('minutes') ); \r",
							"});\r",
							"} \r",
							"else { pm.test(\"Тест на MESSAGE\", function () {\r",
							"       pm.expect(jsonData.message).to.eql(\"Расписание успешно добавлено в задачу \" + pm.environment.get('task_id') + \" Следущая дата запуска \" + pm.environment.get('days') + \".\" + pm.environment.get('month') + \".2020 \" + pm.environment.get('hours') + \":\" + pm.environment.get('minutes') ); \r",
							"});\r",
							"}\r",
							"\r",
							"//тест на MESSAGE ломался 2 раза пока набирала и проверяла )))), любой пробел и Бух"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"email_owner\": \"manager@mail.ru\",\r\n\"task_id\": \"{{task_id}}\",\r\n\"hours\": {{hours}},\r\n\"minutes\": {{minutes}},\r\n\"month\": {{month}},\r\n\"days\": {{days}},\r\n\"day_weeks\": \"*\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://users.bugred.ru/tasks/rest/addtaskincron",
					"protocol": "http",
					"host": [
						"users",
						"bugred",
						"ru"
					],
					"path": [
						"tasks",
						"rest",
						"addtaskincron"
					]
				}
			},
			"response": []
		},
		{
			"name": "DZ_41_shop_1_old",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//Определяем количество товара\r",
							"var quantity = Math.floor(Math.random() * 10) + 1;\r",
							"pm.environment.set(\"quantity\", quantity);\r",
							"console.log(\"количество создаваемого товара - \" + quantity);\r",
							"var items = \"Пухо_\"+ _.random(1, 5);\r",
							"pm.environment.set(\"items\", items) // переменная для поиска \r",
							"\r",
							"for(i = 0; i < quantity; i++)\r",
							"{ var name = items  + Math.floor(Math.random() * 150);\r",
							"  const echoPostRequest = {\r",
							"    url: 'http://shop.bugred.ru/api/items/create/',\r",
							"    method: 'POST',\r",
							"    header: 'Content-Type:application/json',\r",
							"    body: {\r",
							"    mode: 'raw',\r",
							"    raw: JSON.stringify({ \r",
							"        name: name,\r",
							"        section: \"Платья\",\r",
							"        description: \"Футбол форевер\"\r",
							"       })\r",
							"  }\r",
							"}; \r",
							"\r",
							"pm.sendRequest(echoPostRequest, function (err, response) {\r",
							"    console.log(response.json());\r",
							"});\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"//создаём массив с id созданных товаров\r",
							"ar = new Array(); \r",
							"    for (i=0; i<jsonData.result.length; i++) {\r",
							"        ar.push(jsonData.result[i].id)\r",
							"    }\r",
							"console.log(ar)\r",
							"\r",
							"pm.test(\"Проверяем, что поиск возвращает правильное количество товара - \" + pm.environment.get(\"quantity\"), function () {\r",
							"    pm.expect(jsonData.result).to.have.lengthOf(pm.environment.get(\"quantity\"));\r",
							"});\r",
							"\r",
							"for (i=0; i<jsonData.result.length; i ++) {\r",
							"pm.test(\"Проверяем, что все товары по поиску имеют имя - \" + pm.environment.get(\"items\"), function () {\r",
							"    \r",
							"    pm.expect(jsonData.result[i].name).include(pm.environment.get(\"items\"));\r",
							"});\r",
							"}\r",
							"//удаляем созданные товары\r",
							"ar.forEach(function (element) {\r",
							"\r",
							"const deleteRequest = {\r",
							"    url: 'http://shop.bugred.ru/api/items/delete/',\r",
							"    method: 'DELETE',\r",
							"    header: 'Content-Type:application/json',\r",
							"    body: {\r",
							"    mode: 'raw',\r",
							"    raw: JSON.stringify({ \r",
							"        id: element.ar, \r",
							"       })\r",
							"  }\r",
							"};\r",
							"pm.sendRequest(deleteRequest, function (err, res) {\r",
							"  console.log(err ? err : res.json());\r",
							"});  \r",
							"} );\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"/*for (i=0; i<jsonData.result.length; i++) {\r",
							"    var id = ar[i];\r",
							"    const deleteRequest = {\r",
							"    url: 'http://shop.bugred.ru/api/items/delete/',\r",
							"    method: 'DELETE',\r",
							"    header: 'Content-Type:application/json',\r",
							"    body: {\r",
							"    mode: 'raw',\r",
							"    raw: JSON.stringify({ \r",
							"        id: id, \r",
							"       })\r",
							"  }\r",
							"};\r",
							"pm.sendRequest(deleteRequest, function (err, res) {\r",
							"  console.log(err ? err : res.json());\r",
							"});  \r",
							"}  */\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "query",
							"value": "{{items}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://shop.bugred.ru/api/items/search",
					"protocol": "http",
					"host": [
						"shop",
						"bugred",
						"ru"
					],
					"path": [
						"api",
						"items",
						"search"
					],
					"query": [
						{
							"key": "section",
							"value": "Шорты",
							"disabled": true
						},
						{
							"key": "description",
							"value": "Хороша от солнца",
							"disabled": true
						},
						{
							"key": "price",
							"value": "333",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}