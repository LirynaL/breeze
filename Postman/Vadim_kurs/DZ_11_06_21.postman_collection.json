{
	"info": {
		"_postman_id": "bd15d796-6a33-491c-94d0-fded4722c1b5",
		"name": "DZ_11_06_21",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.environment.set(\"token\", pm.response.json().token)\r",
							"console.log(pm.response.json().token)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "login",
						"value": "kuku",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "privet",
							"type": "text"
						},
						{
							"key": "password",
							"value": "pooh",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://{{url}}:5002/login",
					"protocol": "http",
					"host": [
						"{{url}}"
					],
					"port": "5002",
					"path": [
						"login"
					],
					"query": [
						{
							"key": "login",
							"value": "privet",
							"disabled": true
						},
						{
							"key": "password",
							"value": "pooh",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "2. PM_2_user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"name\", pm.response.json().person.u_name[0])\r",
							"\r",
							"\r",
							"//2.1 Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Crash Status code is 200\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"//2.2 Проверка структуры json в ответе.\r",
							"var schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"person\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"u_age\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"u_name\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"u_age\",\r",
							"        \"u_name\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"qa_salary_after_12_months\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"qa_salary_after_6_months\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"start_qa_salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"person\",\r",
							"    \"qa_salary_after_12_months\",\r",
							"    \"qa_salary_after_6_months\",\r",
							"    \"start_qa_salary\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							" var schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"person\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"u_age\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"u_name\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"u_age\",\r",
							"        \"u_name\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"qa_salary_after_12_months\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"qa_salary_after_6_months\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"start_qa_salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"person\",\r",
							"    \"qa_salary_after_12_months\",\r",
							"    \"qa_salary_after_6_months\",\r",
							"    \"start_qa_salary\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test('CRASH Schema is valid', function() {\r",
							"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							"console.log(tv4.error);\r",
							"console.log(tv4.error.dataPath);\r",
							"\r",
							"/* 2.3 В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.*/\r",
							"var req = JSON.parse(request.data)\r",
							"console.log(req.salary)\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"Test qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(req.salary * 2);\r",
							"});\r",
							"pm.test(\"CRASH Test qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(req.salary * 3);\r",
							"});\r",
							"pm.test(\"Test qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(req.salary * 2.9);\r",
							"});\r",
							"pm.test(\"CRASH Test qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(req.salary * 4.2);\r",
							"});\r",
							"pm.test(\"Test u_salary_1.5_year \", function () {\r",
							"    pm.expect(jsonData.person.u_salary_1_5_year).to.eql(req.salary * 4);\r",
							"});\r",
							"pm.test(\"CRASH Test u_salary_1.5_year\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_1_5_year).to.eql(req.salary * 2);\r",
							"});\r",
							"\r",
							"//2.4 Достать значение из поля 'u_salary_1.5_year' и передать в поле salary\r",
							"console.log(jsonData.person.u_salary_1_5_year)\r",
							"pm.environment.set(\"u_salary_1_5_year\", jsonData.person.u_salary_1_5_year);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"auth_token\": \"{{token}}\",\r\n    \"name\": \"ruda\",\r\n    \"age\": \"10\",\r\n    \"salary\": \"300\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{url}}:5002/user_info",
					"protocol": "http",
					"host": [
						"{{url}}"
					],
					"port": "5002",
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "3. new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//3.1 Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Crash Status code is 200\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"//3.2 Проверка структуры json в ответе.\r",
							"var schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							" var schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"person\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"u_age\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"u_name\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"u_age\",\r",
							"        \"u_name\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"qa_salary_after_12_months\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"qa_salary_after_6_months\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"start_qa_salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"person\",\r",
							"    \"qa_salary_after_12_months\",\r",
							"    \"qa_salary_after_6_months\",\r",
							"    \"start_qa_salary\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test('CRASH Schema is valid', function() {\r",
							"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							"console.log(tv4.error);\r",
							"\r",
							"/* 3.3 В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.*/\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"Test salary in response *2\", function () {\r",
							"    pm.expect(Number(jsonData.salary[1])).to.eql((pm.environment.get(\"u_salary_1_5_year\")) * 2);\r",
							"});\r",
							"pm.test(\"CRASH Test salary in response *2\", function () {\r",
							"    pm.expect(Number(jsonData.salary[1])).to.eql((pm.environment.get(\"u_salary_1_5_year\")) * 10);\r",
							"});\r",
							"\r",
							"pm.test(\"Test salary in response *3\", function () {\r",
							"    pm.expect(Number(jsonData.salary[2])).to.eql((pm.environment.get(\"u_salary_1_5_year\")) * 3);\r",
							"});\r",
							"pm.test(\"CRASH Test salary in response *3\", function () {\r",
							"    pm.expect(Number(jsonData.salary[2])).to.eql((pm.environment.get(\"u_salary_1_5_year\")) * 5);\r",
							"});\r",
							"console.log(Number(jsonData.salary[1]));\r",
							"\r",
							"// 3.4 проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"pm.test(\"Test 2nd element above 1st in array\", function () {\r",
							"    pm.expect(Number(jsonData.salary[2])).to.be.above(Number(jsonData.salary[1]));\r",
							"});\r",
							"\r",
							"pm.test(\"CRASH Test 2nd element above 1st in array\", function () {\r",
							"    pm.expect(Number(jsonData.salary[2])).to.be.below(Number(jsonData.salary[1]));\r",
							"});\r",
							"pm.test(\"Test 2nd element above zero in array\", function () {\r",
							"    pm.expect(Number(jsonData.salary[2])).to.be.above(jsonData.salary[0]);\r",
							"});\r",
							"pm.test(\"CRASH Test 2nd element above zero in array\", function () {\r",
							"    pm.expect(Number(jsonData.salary[2])).to.be.below(jsonData.salary[0]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "15",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{u_salary_1_5_year}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}:5002/new_data",
					"host": [
						"{{url}}"
					],
					"port": "5002",
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "4. test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//4.1 Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Crash Status code is 200\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							" //4.2 Проверка структуры json в ответе.\r",
							"var schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"daily_food\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"daily_sleep\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"daily_food\",\r",
							"    \"daily_sleep\",\r",
							"    \"name\"\r",
							"  ]\r",
							"}\r",
							"var jsonData = pm.response.json();\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							"var schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"daily_food\": {\r",
							"      \"type\": \"array\"\r",
							"    },\r",
							"    \"daily_sleep\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"daily_food\",\r",
							"    \"daily_sleep\",\r",
							"    \"name\"\r",
							"  ]\r",
							"}\r",
							"var jsonData = pm.response.json();\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"console.log(tv4.error);\r",
							"\r",
							"/* 4.3 В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент*/\r",
							"\r",
							"console.log(request.data.weight)\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"daily_food = weight * 0.012\", function () {\r",
							"    pm.expect(jsonData.daily_food).to.eql(request.data.weight * 0.012);\r",
							"});\r",
							"pm.test(\"CRASH daily_food = weight * 0.012\", function () {\r",
							"    pm.expect(jsonData.daily_food).to.eql(request.data.weight * 0.013);\r",
							"});\r",
							"pm.test(\"daily_sleep = weight * 2.5\", function () {\r",
							"    pm.expect(jsonData.daily_sleep).to.eql(request.data.weight * 2.5);\r",
							"});\r",
							"pm.test(\"CRASH daily_sleep = weight * 2.5\", function () {\r",
							"    pm.expect(jsonData.daily_sleep).to.eql(request.data.weight * 5);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "3",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "7",
							"type": "text"
						},
						{
							"key": "name",
							"value": "ban",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}:5002/test_pet_info",
					"host": [
						"{{url}}"
					],
					"port": "5002",
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "5. get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//5.1 Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Crash Status code is 200\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"// 5.2 Проверка структуры json в ответе.\r",
							"var schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"family\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"children\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"family\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"var jsonData = pm.response.json();\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							"var schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"family\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"children\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"family\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"var jsonData = pm.response.json();\r",
							"pm.test('CRASH Schema is valid', function() {\r",
							"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							"console.log(tv4.error);\r",
							"// 5.3 Проверить что занчение поля name = значению переменной name из окружения\r",
							"pm.test(\"name = variable name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"name\"));\r",
							"});\r",
							"pm.test(\"CRASH name = variable name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"token\"));\r",
							"});\r",
							"// 5.4 Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"\r",
							"pm.test(\"Value 'age' in responce = 'age' in request \", function () {\r",
							"    pm.expect(jsonData.age).to.eql(request.data.age);\r",
							"});\r",
							"pm.test(\"CRASH Value 'age' in responce = 'age' in request \", function () {\r",
							"    pm.expect(jsonData.age).to.eql(request.data.salary);\r",
							"});\r",
							"var jsonData = pm.response.json();\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "20",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{u_salary_1_5_year}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}:5002/get_test_user",
					"host": [
						"{{url}}"
					],
					"port": "5002",
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "6.currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"console.log(jsonData.length)\r",
							"var i=jsonData.length\r",
							"function getRandomInt(i) {\r",
							"  return Math.floor(Math.random() * i);\r",
							"\r",
							"}\r",
							"console.log(jsonData[getRandomInt(i)].Cur_ID);\r",
							"\r",
							"pm.environment.set(\"curr_code\", jsonData[getRandomInt(i)].Cur_ID);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}:5002/currency",
					"host": [
						"{{url}}"
					],
					"port": "5002",
					"path": [
						"currency"
					],
					"query": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "7. curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//7.1 Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Crash Status code is 200\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// 7.2 Проверка структуры json в ответе.\r",
							"var schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"Cur_Abbreviation\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_ID\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Cur_Name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_OfficialRate\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"Cur_Scale\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Date\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"Cur_Abbreviation\",\r",
							"    \"Cur_ID\",\r",
							"    \"Cur_Name\",\r",
							"    \"Cur_OfficialRate\",\r",
							"    \"Cur_Scale\",\r",
							"    \"Date\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"var schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"Cur_Abbreviation\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_ID\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Cur_Name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_OfficialRate\": {\r",
							"      \"type\": \"array\"\r",
							"    },\r",
							"    \"Cur_Scale\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Date\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"Cur_Abbreviation\",\r",
							"    \"Cur_ID\",\r",
							"    \"Cur_Name\",\r",
							"    \"Cur_OfficialRate\",\r",
							"    \"Cur_Scale\",\r",
							"    \"Date\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"pm.test('CRASH Schema is valid', function() {\r",
							"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							"console.log(tv4.error);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{curr_code}}",
							"type": "text"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}:5002/curr_byn",
					"host": [
						"{{url}}"
					],
					"port": "5002",
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		}
	]
}